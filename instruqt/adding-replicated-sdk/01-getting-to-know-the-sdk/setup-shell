#!/usr/bin/env bash

# This set line ensures that all failures will cause the script to error and exit
set -euxo pipefail

HOME_DIR=/home/replicant

# Wait for Instruqt bootstrap to be complete
while [ ! -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
  echo "Waiting for Instruqt to finish booting the VM"
  sleep 1
done

# Setup REPLICATED_API_TOKEN
raw_password=$(echo -n "${INSTRUQT_PARTICIPANT_ID}" | sha256sum)
password=${raw_password::20}
login=$( jq -n -c --arg email "${INSTRUQT_PARTICIPANT_ID}@replicated-labs.com" --arg password "${password}" '$ARGS.named' )
token=$(curl -s -H "Content-Type: application/json" --request POST -d "$login" https://id.replicated.com/v1/login | jq -r ".token")

i=0
while [[ "$token" == "null" && $i -lt 20 ]]
do
    sleep 2
    token=$(curl -s -H "Content-Type: application/json" --request POST -d "$login" https://id.replicated.com/v1/login | jq -r ".token")
    echo "Token: ${token} value"
    i=$((i+1))
done

UUID=$(cat /proc/sys/kernel/random/uuid)
apiToken=$( jq -n -c --arg name "instruqt-${UUID}" --argjson read_only false '$ARGS.named' )
access_token=$(curl -s -H "Content-Type: application/json" -H "Authorization: $token" --request POST -d "$apiToken" https://api.replicated.com/vendor/v1/user/token | jq -r ".access_token")

app_slug=$(curl --header 'Accept: application/json' --header 'Authorization: ${access_token}' https://api.replicated.com/vendor/v3/apps | jq -r '.apps[] | select ( .name == "Mastodon" ) | .slug')

agent variable set USERNAME ${INSTRUQT_PARTICIPANT_ID}@replicated-labs.com
agent variable set PASSWORD ${password}
agent variable set REPLICATED_API_TOKEN ${access_token}
agent variable set REPLICATED_APP ${app_slug}


