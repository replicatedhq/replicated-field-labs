#!/bin/bash

# copy support bundle from node1 over to the workstation

mkdir ~/troubleshoot-1 && cd ~/troubleshoot-1 || true

# install sbctl
curl -LO https://github.com/replicatedhq/sbctl/releases/latest/download/sbctl_linux_amd64.tar.gz \
  && tar -xzvf sbctl_linux_amd64.tar.gz  -C /tmp sbctl \
  && cp /tmp/sbctl /usr/local/bin/sbctl \
  && rm sbctl_linux_amd64.tar.gz


# generate and fetch kubeconfig for cluster
mkdir /root/.kube
ssh kurl-node-1 "curl https://kurl.sh/latest/tasks.sh | SUDO_USER=root bash -s generate-admin-user"
scp kurl-node-1:root.conf /root/.kube/config

# break stuff
debug-message "Reticulating Splines..."
debug-message "patch a random deployment to use a low memory limit & request"

app_slug=$(agent variable get APP_SLUG)

if [[ -z "${app_slug}" ]]; then
  fail-message "APP_SLUG could not be parsed from env"
  exit 1
fi

set +u
until [[ -n $deployment  ]] ; do
  read -r namespace deployment < <(kubectl get deployments -A --no-headers -l kots.io/app-slug="${app_slug}"  | awk '{print $1,$2}' | shuf -n1)
done
set -u

# backup resource before we edit it for later
kubectl get deployment -n "${namespace}" "${deployment}" -o json | jq 'del(.status,.metadata.managedFields,.metadata.annotations."kubectl.kubernetes.io/last-applied-configuration",.metadata.generation,.metadata.uid,.metadata.resourceVersion,.metadata.annotations."deployment.kubernetes.io/revision",.metadata.creationTimestamp)'

# if the deployment doesn't have a requests object, we need to add it, otherwise replace it
if kubectl get deployment -n "${namespace}" "${deployment}" -o json | jq '.spec.template.spec.containers[0].resources.requests // empty'; then
  op=add
else
  op=replace
fi

kubectl patch deployment -n "${namespace}" "${deployment}" --type='json' -p='[{"op": '"$op"', "path": "/spec/template/spec/containers/0/resources/requests/memory", "value": "10Mi"}]'

if kubectl get deployment -n "${namespace}" "${deployment}" -o json | jq '.spec.template.spec.containers[0].resources.limits // empty'; then
  op=add
else
  op=replace
fi
kubectl patch deployment -n "${namespace}" "${deployment}" --type='json' -p='[{"op": '"$op"', "path": "/spec/template/spec/containers/0/resources/limits/memory", "value": "10Mi"}]'

sleep 120


support_bundle_path=/tmp/support-bundle-troubleshoot-1.tar.gz
kubectl support-bundle --load-cluster-specs --interactive=false -o "$support_bundle_path"
debug-message "wrote support bundle to $support_bundle_path"

debug-message "Mischief Managed! patched ${deployment} in ${namespace} to use a low memory limit & request"
