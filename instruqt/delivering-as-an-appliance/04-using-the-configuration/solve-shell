#!/usr/bin/env bash

# This set line ensures that all failures will cause the script to error and exit
set -euxo pipefail
HOME_DIR=/home/replicant
source /etc/profile.d/header.sh

rm ${HOME_DIR}/release/slackernews-0.6.1.tgz 

yq -i '.version = "0.6.2"' ${HOME_DIR}/slackernews/Chart.yaml
yq -i '.spec.chart.chartVersion = "0.6.2"' ${HOME_DIR}/release/slackernews-chart.yaml

helm package -u ${HOME_DIR}/slackernews -d ${HOME_DIR}/release
chown -R replicant ${HOME_DIR}/release
chmod -R 755 ${HOME_DIR}/release

# configure the required environment variables for the Replicated CLI
export REPLICATED_API_TOKEN=$(agent variable get REPLICATED_API_TOKEN)
export REPLICATED_APP=$(agent variable get REPLICATED_APP)

cat <<CHART_MANIFEST > ${HOME_DIR}/release/slackernews-chart.yaml
apiVersion: kots.io/v1beta2
kind: HelmChart
metadata:
  name: slackernews
spec:
  # chart identifies a matching chart from a .tgz
  chart:
    name: slackernews
    chartVersion: 0.6.2

  # values are used in the customer environment, as a pre-render step
  # these values will be supplied to helm template
  values:
    postgres:
      enabled: true
      deploy_postgres: repl{{ ConfigOption "deploy_postgres" | ParseBool }}
    slack:
      botToken: repl{{ ConfigOption "slack_bot_token" | quote }}
      userToken: repl{{ ConfigOption "slack_user_token" | quote }}
      clientId: repl{{ ConfigOption "slack_clientid" | quote }}
      clientSecret: repl{{ ConfigOption "slack_clientsecret" | quote }}
    slackernews:
      domain: repl{{ ConfigOption "slackernews_domain" }}
      adminUserEmails: repl{{ ConfigOption "slackernews_admin_user_emails" | quote }}
    admin-console:
      enabled: false
    replicated:
      enabled: false
      preflights: false
      isKOTSManaged: true
    service:
      tls:
        enabled: true
    nginx:
      enabled: true 
      service:
        type: repl{{ ConfigOption "service_type" }}
    images:
      pullSecrets:
        replicated:
          dockerconfigjson: ""
      slackernews:
        pullSecret: repl{{ ImagePullSecretName }}
        repository: '{{repl HasLocalRegistry | ternary LocalRegistryHost "proxy.replicated.com" }}/{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/ghcr.io/slackernews" ) }}/slackernews-web:1.0.17'
      nginx:
        pullSecret: repl{{ ImagePullSecretName }}
        repository: '{{repl HasLocalRegistry | ternary LocalRegistryHost "proxy.replicated.com" }}/{{repl HasLocalRegistry | ternary LocalRegistryNamespace (print "proxy/" (LicenseFieldValue "appSlug") "/index.docker.io/library" ) }}/nginx:1.25.3'

    metrics:
      serviceMonitor:
        enabled: true
 
  optionalValues:
    - when: '{{repl ConfigOptionEquals "deploy_postgres" "1"}}'
      recursiveMerge: true
      values:
        postgres:
          password: '{{repl ConfigOption "postgres_password" }}'
        
    - when: '{{repl ConfigOptionEquals "deploy_postgres" "0"}}'
      recursiveMerge: true
      values:
        postgres:
          uri: '{{repl ConfigOption "postgres_external_uri" }}'

    - when: '{{repl ConfigOptionEquals "service_type" "load_balancer"}}'
      recursiveMerge: true
      values:
        nginx:
          service:
            type: LoadBalancer

    - when: '{{repl ConfigOptionEquals "service_type" "node_port"}}'
      recursiveMerge: true
      values:
        nginx:
          service:
            type: NodePort
            nodePort:
              port: repl{{ ConfigOption "node_port_port" }}

    - when: '{{repl ConfigOptionEquals "certificate_source" "upload_existing"}}'
      recursiveMerge: true
      values:
        service:
          tls:
            enabled: true
            cert: repl{{ ConfigOptionData "tls_cert" | nindent 14 }}
            key: repl{{ ConfigOptionData "tls_key" | nindent 14 }}
            ca: repl{{ ConfigOptionData "tls_ca" | nindent 14 }}
        
    - when: '{{repl ConfigOptionEquals "certificate_source" "generate_internal"}}'
      recursiveMerge: true
      values:
        service:
          tls:
            enabled: true
            ca: |-
              {{repl \$ca := genCA (LicenseFieldValue "customerName") 365 }}
              {{repl \$ca.Cert | Base64Encode}}
            cert: |-
              {{repl \$cert := genSignedCert (ConfigOption "slackernews_domain") nil (list (ConfigOption "slackernews_domain")) 365 \$ca }}
              {{repl \$cert.Cert | nindent 14 }}
            key: |-
              {{repl \$cert.Key | nindent 14 }}
CHART_MANIFEST

# release the app to the Unstable channel
replicated release create --promote Unstable --yaml-dir ${HOME_DIR}/release --version 0.6.2 \
  --release-notes "Collects configuration from the user and provides it to Helm" \
  --app ${REPLICATED_APP} --token ${REPLICATED_API_TOKEN}
release_sequence=$(curl --header "Accept: application/json" --header "Authorization: ${REPLICATED_API_TOKEN}" https://api.replicated.com/vendor/v3/apps | jq -r '.apps[] | select( .slug == "'${REPLICATED_APP}'" ) | .channels[] | select( .name == "Unstable" ) | .releaseSequence')

# promote to the other channels
replicated release promote ${release_sequence} Beta --version 0.6.2 \
  --release-notes "Adds configuration screen for the appliance" \
  --app ${REPLICATED_APP} --token ${REPLICATED_API_TOKEN}
replicated release promote ${release_sequence} Stable --version 0.6.2 \
  --release-notes "Adds configuration screen for the appliance" \
  --app ${REPLICATED_APP} --token ${REPLICATED_API_TOKEN}

exit 0
