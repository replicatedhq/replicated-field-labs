#!/usr/bin/env bash

# This set line ensures that all failures will cause the script to error and exit
set -euxo pipefail

# simple SSH client setup so we can SSH to/from the shell

cat <<EOF >> "$HOME/.ssh/config"
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOF

# Display PARTICIPANT_ID info for Vendor Portal
echo "export INSTRUQT_PARTICIPANT_ID=${INSTRUQT_PARTICIPANT_ID}" >> /home/replicant/.bashrc
curl -s -o /etc/profile.d/header.sh https://raw.githubusercontent.com/replicatedhq/kots-field-labs/main/libs/header.sh
source /etc/profile.d/header.sh

sed -i "s|http://wordpress|https://kubernetes-vm-31000-"${INSTRUQT_PARTICIPANT_ID}".env.play.instruqt.com/|g" /home/replicant/manifests/k8s-app.yaml

# get he API token for this script to use
api_token=$(get_api_token)

# get the app slug in order to release the app
app_slug=$(curl --header "Accept: application/json" --header "Authorization: ${api_token}" https://api.replicated.com/vendor/v3/apps | jq -r '.apps[0].slug')

# release to the `Unstable` channel
replicated release create --promote Unstable --yaml-dir /home/replicant/manifests/ --version 0.1.0  \
  --release-notes "Prepares for distribution with Replicated" \
  --app ${app_slug} --token ${api_token}

# get the sequence number for the release to promote
release_sequence=$(curl --header "Accept: application/json" --header "Authorization: ${api_token}" https://api.replicated.com/vendor/v3/apps | jq -r '.apps[0].channels[] | select( .name == "Unstable" ) | .releaseSequence')

# promote to the `Beta` channel
replicated release promote ${release_sequence} Beta --version 0.1.0 \
  --release-notes "Prepares for distribution with Replicated" \
  --app ${app_slug} --token ${api_token}
 
# promote to the `Stable` channel
replicated release promote ${release_sequence} Stable --version 0.1.0 \
  --release-notes "Prepares for distribution with Replicated" \
  --app ${app_slug} --token ${api_token}

# provide an email address for the new customer
customer_email="${INSTRUQT_PARTICIPANT_ID}@geeglo.io"

# create the new customer and keep track of the ID
customer_id=$(replicated customer create --name "Wordpress Customer" --email ${customer_email} --channel Stable --expires-in 720h --output json --app ${app_slug} --token ${api_token} | jq -r .id)
