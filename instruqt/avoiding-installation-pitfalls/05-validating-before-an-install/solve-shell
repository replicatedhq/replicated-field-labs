#!/usr/bin/env bash

# download and use our shared library with auto-download functionality
curl -s -o /etc/profile.d/header.sh https://raw.githubusercontent.com/replicatedhq/replicated-field-labs/refactor/crdant/builds-comprehensive-library/libs/header.sh
source /etc/profile.d/header.sh

# Initialize setup script with proper error handling
init_setup_script

# get the customer id, since it's the password for the Helm installation
# and users like to copy/paste
api_token=$(get_api_token)
app_id=$(get_app_id "${api_token}")
app_slug=$(get_app_slug "${api_token}")

# provide an email address for the new customer
customer_email="${INSTRUQT_PARTICIPANT_ID}@geeglo.io"

# create the new customer and keep track of the ID
customer_id=$(replicated customer create --name "Geeglo" --email ${customer_email} --channel Stable --expires-in 720h --kots-install=false --output json --app ${app_slug} --token ${api_token} | jq -r .id)

# make sure the customer has a trial license
updated_customer=$(curl --header 'Accept: application/json' --header "Authorization: ${api_token}" "https://api.replicated.com/vendor/v3/app/${app_id}/customer/${customer_id}" | \
  jq -c --arg appId "${app_id}" '.customer | {"app_id": $appId, "name": .name, "email": .email, "channel_id": .channels[0].id, "expires_at": .expiresAt, "type": "trial", "is_airgap_enabled": .airgap, "is_gitops_supported": .isGitopsSupported, "is_identity_service_supported": .isIdentityServiceSupported, "is_geoaxis_supported": .isGeoaxisSupported, "is_snapshot_supported": .isSnapshotSupported, "is_support_bundle_upload_enabled": .isSupportBundleUploadEnabled, "entitlementValues":[]}')

# make sure the user has a trial license

# log into the registry as the new customer, use tmux so we do it as
# the `replicant` user

# get the registry password (which is the license id)
registry_password=$(curl --header 'Accept: application/json' --header "Authorization: ${api_token}" "https://api.replicated.com/vendor/v3/app/${app_id}/customer/${customer_id}" | \
  yq .customer.installationId) 

### Setup tmux session for registry login
#
# In a test scenario Instruqt does not run the user shell for the
# challenge, which means the tmux session is never established. We
# need the session for solve scripts for other challenges to 
# succeed, so let's create it here.
#

setup_instruqt_tmux_session "shell" "replicant" true

# log in by sending the login sequence to the terminal, the clean up
tmux send-keys -t shell helm SPACE registry SPACE login SPACE registry.replicated.com SPACE "--username ${customer_email}" SPACE "--password ${registry_password}" ENTER
tmux send-keys -t shell clear ENTER

