#!/usr/bin/env bash
#
# This script runs when the platform check the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#

# download and use our shared library with auto-download functionality
curl -s -o /etc/profile.d/header.sh https://raw.githubusercontent.com/replicatedhq/replicated-field-labs/refactor/crdant/builds-comprehensive-library/libs/header.sh
source /etc/profile.d/header.sh

# Initialize setup script with proper error handling
init_setup_script

# get the helm login and install commands so we can use `helm show values` in
# the challenge

export REPLICATED_API_TOKEN=$(agent variable get REPLICATED_API_TOKEN)
export REPLICATED_APP=$(agent variable get REPLICATED_APP)
app_slug=${REPLICATED_APP}
api_token=${REPLICATED_API_TOKEN}
registry_default=registry.replicated.com

# get the needed info for the app, we know there's only one so grab the first
app_id=$(get_app_id "${api_token}")

set +u
# get the registry hostname
registry_custom=$(replicated api get /v3/app/${app_id}/custom-hostnames | jq -r 'if .Body.registry == null then "" else (.Body.registry[] | select( .is_default == true ) | .hostname) end')
set -u

# get the needed customer info for the Nitflex customer
customer=$(replicated api get /v3/app/${app_id}/customers | jq -c '.customers[] | select(.name == "Geeglo") | { "login": .email, "password": .installationId, "registryOverride": .channels[0].customHostnameOverrides.registry.hostname }')
set +u
registry_override=$(echo "${customer}" | jq -r '.registryOverride')
set -u

agent variable set REGISTRY_USERNAME $(echo "${customer}" | jq -r '.login')
agent variable set REGISTRY_PASSWORD $(echo "${customer}" | jq -r '.password')
agent variable set REGISTRY_HOST "${registry_override:-${registry_custom:-${registry_default}}}"

exit 0
