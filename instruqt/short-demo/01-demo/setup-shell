#!/bin/sh
#
# This script runs when the platform setup the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#
cat <<'SAVE_SCRIPT' >> /home/replicant/trigger.sh
#!/bin/bash 

# Setup REPLICATED_APP and REPLICATED_API_TOKEN
login=$( jq -n -c --arg email "${INSTRUQT_PARTICIPANT_ID}@replicated-labs.com" --arg password "${INSTRUQT_PARTICIPANT_ID}" '$ARGS.named' )
token=$(curl -s -H "Content-Type: application/json" --request POST -d "$login" https://id.replicated.com/v1/login | jq -r ".token")

i=0
while [[ "$token" == "null" && $i -lt 20 ]]
do
    sleep 2
    token=$(curl -s -H "Content-Type: application/json" --request POST -d "$login" https://id.replicated.com/v1/login | jq -r ".token")
    echo "Token: ${token} value"
    i=$((i+1))
done

UUID=$(cat /proc/sys/kernel/random/uuid)
apiToken=$( jq -n -c --arg name "instruqt-${UUID}" --argjson read_only false '$ARGS.named' )
access_token=$(curl -s -H "Content-Type: application/json" -H "Authorization: $token" --request POST -d "$apiToken" https://api.replicated.com/vendor/v1/user/token | jq -r ".access_token")

echo "export REPLICATED_API_TOKEN=${access_token}" >> /home/replicant/.bashrc
echo "export REPLICATED_APP=short-demo-$INSTRUQT_PARTICIPANT_ID" >> /home/replicant/.bashrc

# Download manifests
mkdir -p /home/replicant/demo-app/manifests
export REPLICATED_API_TOKEN=${access_token}
export REPLICATED_APP=short-demo-$INSTRUQT_PARTICIPANT_ID
replicated release download 1 -d /home/replicant/demo-app/manifests
chown -R replicant /home/replicant/demo-app


# Install kotsadm + application on application
replicated customer download-license --customer "Some big bank" > /home/replicant/license.yaml
export KUBECONFIG=/home/replicant/.kube/config-application
kubectl kots remove short-demo-${INSTRUQT_PARTICIPANT_ID} -n default --force
kubectl kots install short-demo-$INSTRUQT_PARTICIPANT_ID \
  --name short-demo-$INSTRUQT_PARTICIPANT_ID \
  --namespace default \
  --license-file /home/replicant/license.yaml \
  --shared-password $INSTRUQT_PARTICIPANT_ID \
  --no-port-forward \
  --skip-preflights

# Generate a support-bundle by default
json=$( jq -n -c --arg password "$INSTRUQT_PARTICIPANT_ID" '$ARGS.named' )
token=$(curl -H "Content-Type: application/json" --request POST -d "$json" http://application.${_SANDBOX_ID}.instruqt.io:8800/api/v1/login | jq -r ".token")
origin=$( jq -n -c --arg origin "http://application.${_SANDBOX_ID}.instruqt.io:8800" '$ARGS.named' )
command=$(curl -s -H "Content-Type: application/json" -H "Authorization: $token" --request POST -d "$origin" http://application.${_SANDBOX_ID}.instruqt.io:8800/api/v1/troubleshoot/app/short-demo-$INSTRUQT_PARTICIPANT_ID/supportbundlecommand | jq -r ".command[1]")
${command} --insecure-skip-tls-verify=true --interactive=false
SAVE_SCRIPT

chmod a+x /home/replicant/trigger.sh
chown -R replicant /home/replicant/trigger.sh
nohup /home/replicant/trigger.sh > /home/replicant/trigger.out 2> /home/replicant/trigger.err < /dev/null & disown

exit 0
