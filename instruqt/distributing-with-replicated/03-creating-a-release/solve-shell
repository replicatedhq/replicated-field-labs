#!/usr/bin/env bash

# download and use our shared library with auto-download functionality
curl -s -o /etc/profile.d/header.sh https://raw.githubusercontent.com/replicatedhq/replicated-field-labs/refactor/crdant/builds-comprehensive-library/libs/header.sh
source /etc/profile.d/header.sh

# Initialize setup script with proper error handling
init_setup_script

### Note: In a test scenario Instruqt does not run the user shell for the
# challenge, which means the tmux session is never established. We don't
# actually need the session for this solve script, so we skip it.

# Get API token and app slug using library functions
api_token=$(get_api_token)
app_slug=$(get_app_slug)

# Create the LTS channel
replicated channel create --name LTS --description "Releases with long-term support available" \
  --app ${app_slug} --token ${api_token}

# Release to the `Unstable` channel
replicated release create --promote Unstable --chart ${HOME_DIR}/release/slackernews-0.2.0.tgz --version 0.2.0  \
  --release-notes "Prepares for distribution with Replicated by incorporating the Replicated SDK" \
  --app ${app_slug} --token ${api_token}

# Get the sequence number for the release to promote
release_sequence=$(curl --header "Accept: application/json" --header "Authorization: ${api_token}" https://api.replicated.com/vendor/v3/apps | jq -r '.apps[0].channels[] | select( .name == "Unstable" ) | .releaseSequence')

# Promote to the `Beta` channel
replicated release promote ${release_sequence} Beta --version 0.2.0 \
  --release-notes "Prepares for distribution with Replicated by incorporating the Replicated SDK" \
  --app ${app_slug} --token ${api_token}
 
# Promote to the `Stable` channel
replicated release promote ${release_sequence} Stable --version 0.2.0 \
  --release-notes "Prepares for distribution with Replicated by incorporating the Replicated SDK" \
  --app ${app_slug} --token ${api_token}
